from datetime import datetime
from typing import Dict


def generate_executive_summary(analysis_results: Dict) -> str:
    """Generate executive summary report."""
    config = analysis_results.get("config", {})
    summary = analysis_results.get("summary", {})

    report = f"""
EXECUTIVE SUMMARY
================
Analysis: {config.get('name', 'Unknown')}
Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Description: {config.get('description', 'No description provided')}

RESULTS OVERVIEW
---------------
• Total Universe Screened: {analysis_results.get('total_universe', 0)} stocks
• Passed Initial Screening: {analysis_results.get('passed_screening', 0)} stocks
• Final Recommendations: {analysis_results.get('final_results', 0)} stocks
• Success Rate: {(analysis_results.get('final_results', 0) / max(analysis_results.get('total_universe', 1), 1) * 100):.1f}%

AVERAGE QUALITY METRICS
----------------------
• Quality Score: {(summary.get('average_scores', {}).get('quality') or 0):.1f}/100
• Value Score: {(summary.get('average_scores', {}).get('value') or 0):.1f}/100
• Growth Score: {(summary.get('average_scores', {}).get('growth') or 0):.1f}/100
• Risk Score: {(summary.get('average_scores', {}).get('risk') or 0):.1f}/100

TOP RECOMMENDATIONS
------------------"""

    top_picks = summary.get("top_picks", [])
    for i, pick in enumerate(top_picks[:5], 1):
        report += (
            f"\n{i}. {pick['ticker']} - Score: {pick['composite_score']:.1f} ({pick['sector']})"
        )

    report += "\n\nSECTOR BREAKDOWN\n---------------"
    sectors = summary.get("sector_breakdown", {})
    for sector, count in sorted(sectors.items(), key=lambda x: x[1], reverse=True):
        report += f"\n• {sector}: {count} stocks"

    report += "\n\nKEY INSIGHTS\n-----------"
    for insight in summary.get("key_insights", []):
        report += f"\n• {insight}"

    report += f"\n\n{'='*50}\nGenerated by Systematic Investment Analysis Framework\n"

    return report


def generate_detailed_stock_report(stock_result: Dict) -> str:
    """Generate detailed report for a single stock."""
    ticker = stock_result.get("ticker", "N/A")
    basic_data = stock_result.get("basic_data", {})
    scores = stock_result.get("scores", {})

    report = f"""
DETAILED ANALYSIS: {ticker}
{'='*50}

COMPANY OVERVIEW
---------------
• Sector: {basic_data.get('sector', 'N/A')}
• Industry: {basic_data.get('industry', 'N/A')}
• Market Cap: ${(basic_data.get('market_cap', 0) or 0)/1e9:.2f}B
• Current Price: ${(basic_data.get('current_price') or 0):.2f}

COMPOSITE SCORING
----------------
• Overall Score: {(scores.get('composite') or 0):.1f}/100
• Quality Score: {(scores.get('quality') or 0):.1f}/100
• Value Score: {(scores.get('value') or 0):.1f}/100
• Growth Score: {(scores.get('growth') or 0):.1f}/100
• Risk Score: {(scores.get('risk') or 0):.1f}/100

QUALITY ANALYSIS
---------------"""

    quality = stock_result.get("quality", {})
    quality_metrics = quality.get("quality_metrics", {})

    report += f"""
• ROIC: {(quality_metrics.get('roic') or 0):.1%}
• ROE: {(quality_metrics.get('roe') or 0):.1%}
• Current Ratio: {(quality_metrics.get('current_ratio') or 0):.2f}
• Debt/Equity: {(quality_metrics.get('debt_to_equity') or 0):.1f}"""

    quality_flags = quality.get("quality_flags", [])
    if quality_flags:
        report += "\nQuality Concerns:"
        for flag in quality_flags:
            report += f"\n  ⚠ {flag}"

    report += "\n\nVALUE ANALYSIS\n-------------"

    value = stock_result.get("value", {})
    value_metrics = value.get("value_metrics", {})

    report += f"""
• P/E Ratio: {(value_metrics.get('pe_ratio') or 0):.1f}
• P/B Ratio: {(value_metrics.get('pb_ratio') or 0):.2f}
• EV/EBITDA: {(value_metrics.get('ev_ebitda') or 0):.1f}
• EV/EBIT: {(value_metrics.get('ev_ebit') or 0):.1f}"""

    value_flags = value.get("value_flags", [])
    if value_flags:
        report += "\nValue Concerns:"
        for flag in value_flags:
            report += f"\n  ⚠ {flag}"

    report += "\n\nGROWTH ANALYSIS\n--------------"

    growth = stock_result.get("growth", {})
    growth_metrics = growth.get("growth_metrics", {})

    report += f"""
• Revenue Growth: {(growth_metrics.get('revenue_growth') or 0):.1%}
• Earnings Growth: {(growth_metrics.get('earnings_growth') or 0):.1%}
• FCF Growth: {(growth_metrics.get('fcf_growth') or 0):.1%}
• Growth Quality: {growth.get('growth_quality', 'N/A')}"""

    growth_flags = growth.get("growth_flags", [])
    if growth_flags:
        report += "\nGrowth Concerns:"
        for flag in growth_flags:
            report += f"\n  ⚠ {flag}"

    report += "\n\nRISK ANALYSIS\n------------"

    risk = stock_result.get("risk", {})
    risk_metrics = risk.get("risk_metrics", {})

    report += f"""
• Risk Level: {risk.get('risk_level', 'N/A').upper()}
• Financial Risk: {(risk_metrics.get('financial_risk_score') or 0):.1f}/100
• Estimated Beta: {(risk_metrics.get('estimated_beta') or 0):.2f}
• Business Risk: {(risk_metrics.get('business_risk_score') or 0):.1f}/100
• Sector Risk: {risk_metrics.get('sector_risk_level', 'N/A')}"""

    risk_flags = risk.get("risk_flags", [])
    if risk_flags:
        report += "\nRisk Concerns:"
        for flag in risk_flags:
            report += f"\n  ⚠ {flag}"

    # Add valuation results if available
    valuations = stock_result.get("valuations", {})
    if valuations:
        report += "\n\nVALUATION RESULTS\n----------------"

        for model, val_result in valuations.items():
            report += f"""
• {model.upper()} Model:
  - Fair Value: ${(val_result.get('fair_value') or 0):.2f}
  - Current Price: ${(val_result.get('current_price') or 0):.2f}
  - Upside/Downside: {(val_result.get('upside_downside') or 0):.1%}
  - Confidence: {val_result.get('confidence', 'N/A')}"""

    report += f"\n\n{'='*50}\n"

    return report


def generate_screening_summary(analysis_results: Dict) -> str:
    """Generate screening process summary."""
    stocks = analysis_results.get("stocks", [])

    report = f"""
SCREENING PROCESS SUMMARY
========================

FILTERING RESULTS
----------------
• Started with {analysis_results.get('total_universe', 0)} stocks in universe
• {analysis_results.get('passed_screening', 0)} passed initial screening criteria
• {analysis_results.get('final_results', 0)} included in final analysis

SCORE DISTRIBUTIONS
------------------"""

    if stocks:
        # Calculate score distributions
        quality_scores = [s.get("scores", {}).get("quality", 0) for s in stocks]
        value_scores = [s.get("scores", {}).get("value", 0) for s in stocks]
        growth_scores = [s.get("scores", {}).get("growth", 0) for s in stocks]
        risk_scores = [s.get("scores", {}).get("risk", 0) for s in stocks]

        report += f"""
Quality Scores:  Min: {min(quality_scores):.1f}  Max: {max(quality_scores):.1f}  Avg: {sum(quality_scores)/max(len(quality_scores), 1):.1f}
Value Scores:    Min: {min(value_scores):.1f}  Max: {max(value_scores):.1f}  Avg: {sum(value_scores)/max(len(value_scores), 1):.1f}
Growth Scores:   Min: {min(growth_scores):.1f}  Max: {max(growth_scores):.1f}  Avg: {sum(growth_scores)/max(len(growth_scores), 1):.1f}
Risk Scores:     Min: {min(risk_scores):.1f}  Max: {max(risk_scores):.1f}  Avg: {sum(risk_scores)/max(len(risk_scores), 1):.1f}"""

        # Most common flags/concerns
        all_flags = []
        for stock in stocks:
            all_flags.extend(stock.get("quality", {}).get("quality_flags", []))
            all_flags.extend(stock.get("value", {}).get("value_flags", []))
            all_flags.extend(stock.get("growth", {}).get("growth_flags", []))
            all_flags.extend(stock.get("risk", {}).get("risk_flags", []))

        if all_flags:
            # Count flag types
            flag_counts = {}
            for flag in all_flags:
                flag_type = flag.split()[0]  # Get first word as flag type
                flag_counts[flag_type] = flag_counts.get(flag_type, 0) + 1

            report += "\n\nMOST COMMON CONCERNS\n-------------------"
            for flag_type, count in sorted(flag_counts.items(), key=lambda x: x[1], reverse=True)[
                :5
            ]:
                report += f"\n• {flag_type}: {count} occurrences"

    report += f"\n\n{'='*50}\n"

    return report


def generate_full_report(analysis_results: Dict) -> str:
    """Generate comprehensive analysis report."""
    report = generate_executive_summary(analysis_results)
    report += "\n\n" + generate_screening_summary(analysis_results)

    # Add detailed analysis for top 10 stocks
    stocks = analysis_results.get("stocks", [])[:10]

    if stocks:
        report += "\n\nDETAILED STOCK ANALYSIS\n" + "=" * 50

        for stock in stocks:
            report += "\n\n" + generate_detailed_stock_report(stock)

    return report


def export_to_csv_format(analysis_results: Dict) -> str:
    """Export results in CSV format."""
    # Use all_stocks if available, otherwise fall back to stocks
    stocks = analysis_results.get("all_stocks", analysis_results.get("stocks", []))

    if not stocks:
        return "No data to export"

    # CSV header
    csv_data = "Ticker,Sector,Market_Cap_B,Current_Price,Passes_Filters,Composite_Score,Quality_Score,Value_Score,Growth_Score,Risk_Score,P_E,P_B,ROE,ROIC,Revenue_Growth,Debt_Equity\n"

    # Data rows
    for stock in stocks:
        basic = stock.get("basic_data", {})
        scores = stock.get("scores", {})
        quality_metrics = stock.get("quality", {}).get("quality_metrics", {})
        value_metrics = stock.get("value", {}).get("value_metrics", {})
        growth_metrics = stock.get("growth", {}).get("growth_metrics", {})

        # Safe division helper
        def safe_divide(value, divisor, default=0):
            if value is None or divisor is None or divisor == 0:
                return default
            return value / divisor

        # Safe formatting helper
        def safe_format(value, format_str, default="0"):
            if value is None:
                return default
            try:
                return format_str.format(value)
            except (TypeError, ValueError):
                return default

        row = [
            str(stock.get("ticker") or ""),
            str(basic.get("sector") or ""),
            str(safe_format(safe_divide(basic.get("market_cap"), 1e9), "{:.2f}") or "0"),
            str(safe_format(basic.get("current_price", 0), "{:.2f}") or "0"),
            "Y" if stock.get("passes_filters", False) else "N",
            str(safe_format(scores.get("composite", 0), "{:.1f}") or "0"),
            str(safe_format(scores.get("quality", 0), "{:.1f}") or "0"),
            str(safe_format(scores.get("value", 0), "{:.1f}") or "0"),
            str(safe_format(scores.get("growth", 0), "{:.1f}") or "0"),
            str(safe_format(scores.get("risk", 0), "{:.1f}") or "0"),
            str(safe_format(value_metrics.get("pe_ratio", 0), "{:.1f}") or "0"),
            str(safe_format(value_metrics.get("pb_ratio", 0), "{:.2f}") or "0"),
            str(safe_format(quality_metrics.get("roe", 0), "{:.3f}") or "0"),
            str(safe_format(quality_metrics.get("roic", 0), "{:.3f}") or "0"),
            str(safe_format(growth_metrics.get("revenue_growth", 0), "{:.3f}") or "0"),
            str(safe_format(quality_metrics.get("debt_to_equity", 0), "{:.1f}") or "0"),
        ]

        csv_data += ",".join(row) + "\n"

    return csv_data
